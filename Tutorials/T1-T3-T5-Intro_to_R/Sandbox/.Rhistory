dd <- read.table("../Data/MOMv3.3.txt", header = FALSE)
dd <- read.table("../Data/MOMv3.3.txt", header = FALSE, sep = "\t")
dim(dd)
head(dd)
colnames(dd) <- c("Continent", "Status", "Order", "Family", "Genus", "Species", "LogMass", "CombinedMass", "Reference")
head(dd)
dd[,7]
dd[,7][1:10]
dd[,7]
t(dd[1,])
dd[dd == -999] <- NA
summary(dd[,7])
Fam <- sort(unique(dd$Family))
Fam
dd <- read.table("../Data/MOMv3.3.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
dd[dd == -999] <- NA
Fam <- sort(unique(dd$Family))
Fam
dd <- read.table("../Data/MOMv3.3.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(dd) <- c("Continent", "Status", "Order", "Family", "Genus", "Species", "LogMass", "CombinedMass", "Reference")
dd[dd == -999] <- NA
Fam <- sort(unique(dd$Family))
Fam
length(Fam)
pwd()
pwd
getwd()
history()
history
history()
history()
nfam <- length(Fam)
nfam
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/ugly.R')
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/ugly.R')
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/ugly.R')
my_family
dd[i,]
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/ugly.R')
my_avg_bodymass
avg_bodymass_family
time(source("ugly.R"))
system.time(source("ugly.R"))
# read the data
dd <- read.table("../Data/MOMv3.3.txt", header = FALSE,
sep = "\t", stringsAsFactors = FALSE)
# assign column names for header
colnames(dd) <- c("Continent", "Status", "Order", "Family",
"Genus", "Species", "LogMass", "CombinedMass", "Reference")
# set missing data to NA
dd[dd == -999] <- NA
# store number of rows
nrows <- dim(dd)[1]
# extract unique families
Fam <- sort(unique(dd$Family))
# store number of families
nfam <- length(Fam)
# 1) create a dataframe with the names of each
#    family, and initialize AvgBodyMass and NumSpecies
#    to 0 for each row.
avg_bodymass_family <- data.frame(Family = Fam,
AvgBodyMass = 0,
NumSpecies = 0)
print(avg_bodymass_family)
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/bad.R')
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/bad.R')
# read the data
dd <- read.table("../Data/MOMv3.3.txt", header = FALSE,
sep = "\t", stringsAsFactors = FALSE)
# assign column names for header
colnames(dd) <- c("Continent", "Status", "Order", "Family",
"Genus", "Species", "LogMass", "CombinedMass", "Reference")
# set missing data to NA
dd[dd == -999] <- NA
# store number of rows
nrows <- dim(dd)[1]
# extract unique families
Fam <- sort(unique(dd$Family))
# store number of families
nfam <- length(Fam)
# 1) create a dataframe with the names of each
#    family, and initialize AvgBodyMass and NumSpecies
#    to 0 for each row.
avg_bodymass_family <- data.frame(Family = Fam,
AvgBodyMass = 0,
NumSpecies = 0)
print(avg_bodymass_family)
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/bad.R')
print(avg_bodymass_family)
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/bad.R')
print(avg_bodymass_family)
system.time("bad.R")
system.time(source("bad.R"))
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/good.R')
ddsub
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/good.R')
system.time(source("good.R"))
avg_bodymass_family
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/good.R')
avg_bodymass_family
system.time(source("good.R"))
system.time(source("good.R"))
dd <- read.table("../Data/MOMv3.3.txt", header = FALSE,
sep = "\t", stringsAsFactors = FALSE)
# assign column names for header
colnames(dd) <- c("Continent", "Status", "Order", "Family",
"Genus", "Species", "LogMass", "CombinedMass", "Reference")
dd$Family
table(dd$Family)
table(dd$Family == -999)
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/exercise.R')
source('~/github/BSD-QBio/Tutorials/T1-T3-T5-Intro_to_R/Sandbox/exercise.R')
max_bodymass_family <- max_bodymass_family[is.infinite(max_bodymass_family$maxExtant) == FALSE,]
max_bodymass_family <- max_bodymass_family[is.infinite(max_bodymass_family$maxExtinct) == FALSE,]
max_bodymass_family <- max_bodymass_family[is.infinite(max_bodymass_family$maxExtant) == FALSE,]
max_bodymass_family <- max_bodymass_family[is.infinite(max_bodymass_family$maxExtinct) == FALSE,]
print(max_bodymass_family)
sum(max_bodymass_family$maxExtinct > max_bodymass_family$maxExtant)
sum(max_bodymass_family$maxExtinct > max_bodymass_family$maxExtant) / dim(max_bodymass_family)[1]
